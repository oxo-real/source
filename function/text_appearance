#! /usr/bin/env sh
#
##
### source function
###
### color- and stylize terminal text
##
#

## usage
# printf "${fg}${bg}${st}${sc}%s" 'text'

## NOTICE double quotes around appearances

## examples
#printf "${fg_black}${bg_amber}${st_ul}${sc_black}%s${st_def}%s\n" 'text1' 'text2'

#printf "${fg_black}$(BGx aaaaaa)%s${st_def}\n" 'text_appearance'
## NOTICE1 ${fg_black}   is a variable call (with curly braces)
## NOTICE2 $(BGX aaaaaa) is a function call (with round braces)

## NOTICE3 ansi escape sequence '\e' = '\033' = '\x1b'


# text appearance definitions

## fg foreground
## bg background
## st style
## sc style color

## appearances are independently applicable
## style defaults to foreground color when style color is omitted


# text style

st_def='\e[0m'
st_bold='\e[1m'
st_dim='\e[2m'
st_ital='\e[3m'
st_ul='\e[4:1m'
st_dbl_ul='\e[4:2m'
st_wave_ul='\e[4:3m'
st_thin_ul='\e[4:4m'
st_dash_ul='\e[4:5m'
st_blink='\e[0;5m'  ## not supported in alacritty, does work in foot
st_rev='\e[7m'  ## NOTICE FG becomes BG and v.v.

## styles that seem to accept no (SC) color
st_inv='\e[8m'
st_strth='\e[9m'


# text color

## foreground color
### standard (high intensity)
fg_black='\e[38;5;0m'
fg_red='\e[38;5;9m'
fg_green='\e[38;5;10m'
fg_yellow='\e[38;5;11m'
fg_blue='\e[38;5;12m'
fg_magenta='\e[38;5;13m'
fg_cyan='\e[38;5;14m'
fg_grey='\e[38;5;7m'
fg_white='\e[38;5;15m'
### dark
fg_d_grey='\e[38;5;8m'
fg_d_red='\e[38;5;1m'
fg_d_green='\e[38;5;2m'
fg_d_yellow='\e[38;5;3m'
fg_d_blue='\e[38;5;4m'
fg_d_magenta='\e[38;5;5m'
fg_d_cyan='\e[38;5;6m'


## background color
### standard (high intensity)
bg_black='\e[48;5;0m'
bg_red='\e[48;5;9m'
bg_green='\e[48;5;10m'
bg_yellow='\e[48;5;11m'
bg_blue='\e[48;5;12m'
bg_magenta='\e[48;5;13m'
#for color in "${(k)cs_irblack}"; do
#for color in "${(k)cs_irblack}"; do
#for color hex_value in "${(kv)$active_color_scheme}"; do
#for color hex_value in "${(kv)$active_color_scheme}"; do
bg_cyan='\e[48;5;14m'
bg_grey='\e[48;5;7m'
bg_white='\e[48;5;15m'
### dark
bg_d_grey='\e[48;5;8m'
bg_d_red='\e[48;5;1m'
bg_d_green='\e[48;5;2m'
bg_d_yellow='\e[48;5;3m'
bg_d_blue='\e[48;5;4m'
bg_d_magenta='\e[48;5;5m'
bg_d_cyan='\e[48;5;6m'


# style color

### standard (high intensity)
sc_black='\e[58;5;0m'
sc_red='\e[58;5;9m'
sc_green='\e[58;5;10m'
sc_yellow='\e[58;5;11m'
sc_blue='\e[58;5;12m'
sc_magenta='\e[58;5;13m'
sc_cyan='\e[58;5;14m'
sc_grey='\e[58;5;7m'
sc_white='\e[58;5;15m'
### dark
sc_d_grey='\e[58;5;8m'
sc_d_red='\e[58;5;1m'
sc_d_green='\e[58;5;2m'
sc_d_yellow='\e[58;5;3m'
sc_d_blue='\e[58;5;4m'
sc_d_magenta='\e[58;5;5m'
sc_d_cyan='\e[58;5;6m'


# custom color definitions
## see below function definition


# color scheme base_16_irblack

: '

declare -A cs_irblack
#typeset -A cs_irblack

cs_irblack[red]=ff6c60
cs_irblack[green]=a8ff60
cs_irblack[yellow]=ffffb6
cs_irblack[blue]=96cbfe
cs_irblack[magenta]=ff73fd
cs_irblack[cyan]=c6c5fe
cs_irblack[white]=b5b3aa
cs_irblack[grey]=6c6c66
cs_irblack[red2]=ff0000

active_color_scheme='cs_irblack'

#TODO make this work!
#for color hex_value in "${(@kv)cs_irblack}"; do
#for color hex_value in "${(kv)cs_irblack}"; do
#for color in "${(k)cs_irblack}"; do
#for color hex_value in "${(kv)$active_color_scheme}"; do
for color in "${!cs_irblack[@]}"; do

    hex_value="${cs_irblack[$color]}"
    declare fg_"${color}"="$(FGx ${hex_value})"
    declare bg_"${color}"="$(BGx ${hex_value})"
    declare sc_"${color}"="$(SCx ${hex_value})"

done

# '


# prevent existing code from breaking
## #TODO old pointers! change them!

: '

NOC="$st_def"
BOLD="$st_bold"
RED="$fg_red"
YELLOW="$fg_yellow"
BLUE="$fg_blue"
MAGENTA="$fg_magenta"
AMBER="$cc_fg_amber"

# '


# 24 bit custom color engine

## convert hex color code ff00ff to dec value 255;0;255
rgb_hex_2_dec()
{
    rgb_hex_arg=$1

    # remove prepending 0x (#TODO #)
    rgb_hex=$(printf '%s' "$rgb_hex_arg" | sed -e 's/0x//')

    # below gave right output, but with: strlen:4: parse error
    # when entering #ffffff $ TODO find out why
    #rgb_hex=$(echo "$rgb_hex_arg" | sed -e 's/0x//' -e 's/#//')
    #rgb_hex=$(printf '%s' "$rgb_hex_arg" | sed -e 's/0x//' -e 's/#//')
    #rgb_hex=$(printf '%s' "$rgb_hex_arg" | tr -d '0x#')

    for i in 0 2 4; do

	left_byte=$(( i + 1 ))
        right_byte=$(( left_byte + 1 ))

	dec_part=$(echo "obase=10; ibase=16; $(printf '%s' "$rgb_hex" | cut -c $left_byte,$right_byte | tr a-z A-Z)" | bc)

	[[ $i -eq 0 ]] && r_dec=$dec_part
	[[ $i -eq 2 ]] && g_dec=$dec_part
	[[ $i -eq 4 ]] && b_dec=$dec_part

	#rgb_dec="$rgb_dec$dec_part;"

    done

}


## foreground color hex
FGx()
{
    rgb_hex=$1
    rgb_hex_2_dec $rgb_hex

    # 24bit rgb foreground color
    printf "\e[38;2;${r_dec};${g_dec};${b_dec}m"
}


## background color hex
BGx()
{
    rgb_hex=$1
    rgb_hex_2_dec $rgb_hex

    # 24bit rgb background color
    printf "\e[48;2;${r_dec};${g_dec};${b_dec}m"
}


## style color hex
SCx()
{
    rgb_hex=$1
    rgb_hex_2_dec $rgb_hex

    # 24bit rgb style color
    #printf "\e[58;5;${r_dec};${g_dec};${b_dec}m"
    printf "\e[58;2;${r_dec};${g_dec};${b_dec}m"
}


# custom color definitions

## NOTICE when this file is sourced
##        the color definitions below
##        will be getting expanded.
##        therefore a reset of colors
##        will be done in last line
fg_amber="$(FGx ffbf00)"
bg_amber="$(BGx ffbf00)"
fg_teal="$(FGx 008080)"
bg_teal="$(BGx 008080)"
fg_default="$(FGx aaaaaa)"  ## placeholder terminal default foreground


## clear current active cursor line
## arg is number of lines above
## no arg is only current line
erase_line()
{
    [[ -n "$1" ]] && lines="$1" || lines=0

    for (( i=0; i<=$lines; i++ )); do

	[[ i -gt 0 ]] && tput cuu1
	printf "\r"
	tput el

    done
}


# sources

# [terminal - List of ANSI color escape sequences - Stack Overflow](https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences)
# [ANSI escape code - Wikipedia](https://en.wikipedia.org/wiki/ANSI_escape_code)
# [xterm - Wikipedia](https://en.wikipedia.org/wiki/Xterm#Protocols)
# [List of 8-bit computer hardware graphics - Wikipedia](https://en.wikipedia.org/wiki/List_of_8-bit_computer_hardware_graphics#CGA)
# [HTML Color Codes Chart ðŸŽ¨](https://www.rapidtables.com/web/color/html-color-codes.html)


# reset colors (for when sourced in terminal)

## NOTICE always keep this last executable line
##        see notice above
printf "${st_def}"
#printf "${st_def}" '' &> /dev/null
