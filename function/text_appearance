#!/usr/bin/env bash
#
##
### source function
##
#


# usage:
## NOTICE in 24 bit fg/bg combinations; use fg first
## example:
## printf "${BLACK}${AMBER_BG}%s${NOC}\n" "$text"


# https://www.colorhexa.com/
# color testing
# for i in {0..7}; do; printf "\033[0;3${i}mcolor\n"; done

# text appearance definitions


# text style

### underline
UL=`tput smul`
NUL=`tput rmul`
### bold
BOLD=`tput bold`
NORMAL=`tput sgr0`


# 3 bit and 4 bit color

## foreground (text) color
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
GREY='\033[0;37m'
BROWN='\033[0;38m'
BLACK='\033[0;30m'
NOC='\033[0m'	    # no color, default
INV='\033[0;30;47m' # fg black bg grey

## background color fg=black
RED_BG='\033[0;41;30m'
GREEN_BG='\033[0;42;30m'
YELLOW_BG='\033[0;43;30m'
BLUE_BG='\033[0;44;30m'
MAGENTA_BG='\033[0;45;30m'
CYAN_BG='\033[0;46;30m'
GREY_BG='\033[0;47;30m'
BROWN_BG='\033[0;48;30m'
BLACK_BG='\033[0;40;30m'


# 24 bit color

rgb_hex_2_dec()
{
    # convert hex color code #ff00ff to dec value 255;0;255
    rgb_hex=$1
    for i in 0 2 4; do

	left_byte=$(( i+1 ))
        right_byte=$(( left_byte+1 ))

	dec_part=$(echo "obase=10; ibase=16; $(printf '%s' "$rgb_hex" | cut -c $left_byte,$right_byte | tr a-z A-Z)" | bc)

	[[ $i -eq 0 ]] && r_dec=$dec_part
	[[ $i -eq 2 ]] && g_dec=$dec_part
	[[ $i -eq 4 ]] && b_dec=$dec_part

	#rgb_dec="$rgb_dec$dec_part;"

    done
}


FHX()
{
    rgb_hex=$1
    rgb_hex_2_dec $rgb_hex

    # 24bit rgb foreground color
    printf "\033[38;2;${r_dec};${g_dec};${b_dec}m"
}


BHX()
{
    rgb_hex=$1
    rgb_hex_2_dec $rgb_hex

    # 24bit rgb background color
    printf "\033[48;2;${r_dec};${g_dec};${b_dec}m"
}

## 24 bit color specific definitions
## NOTICE when this file is sourced
##        this is getting expanded:
##        therefore reset in last line
AMBER="$(FHX ffbf00)"
AMBER_BG="$(BHX ffbf00)"


# reset colors (for when sourced in terminal)

## NOTICE always keep this last line
##        see notice above
printf "${NOC}%s" ""
