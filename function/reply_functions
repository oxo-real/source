#! /usr/bin/env sh

###                 _            __                  _
###  _ __ ___ _ __ | |_   _     / _|_   _ _ __   ___| |_ ___
### | '__/ _ \ '_ \| | | | |   | |_| | | | '_ \ / __| __/ __|
### | | |  __/ |_) | | |_| |   |  _| |_| | | | | (__| |_\__ \
### |_|  \___| .__/|_|\__, |___|_|  \__,_|_| |_|\___|\__|___/
###          |_|      |___/_____|
###
### # # # # # #
###      #
### # # # # # #
###

: '
reply_functions
source functions for user interaction
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies

# usage
reply_functions $function [$max_time]

NOTICE bash read -ne zsh read
see: note on read

# '


# reply functions definitions

## posix compliant (w/o read)

reply_single()
{
    # first input character goes directly to $reply
    stty_0=$(stty -g)
    stty raw echo icrnl

    reply=$(head -c 1)

    stty $stty_0
}


reply_single_hidden()
{
    # input must be confirmed
    stty_0=$(stty -g)
    stty raw echo icrnl

    reply=$(head -c 1)

    stty $stty_0
}


## with read function

reply_read_plain()
{
    # entry is visible
    # input must be confirmed (with eof (enter))
    read -r -e reply
}


reply_read_plain_hidden()
{
    # entry is not visible
    # input must be confirmed (with eof (enter))
    read -er -s reply
}


reply_read_single()
{
    # first input character goes directly to $reply
    read -er -N 1 reply
}


reply_read_single_hidden()
{
    # first input character goes directly to $reply
    read -er -N 1 -s reply
}


reply_read_single_hidden_timer()
{
    # timer visible
    # timer exits

    # possible error if host script is not #! /usr/bin/env sh
    # error while: set -e

    max_time="$1"
    [[ -n $max_time ]] && i="$max_time" || i=5

    tput sc

    ## while loop will be ran i times
    while [ $i -ge 0 ]; do

	tput rc

	## reverse video timer with tput
	: '
	tput rev	# set mode reverse video
	[ $i -ge 1 ] && printf "$i"
	# '

	## reverse video timer with text_appearance
	#: '
	[ $i -ge 1 ] && printf "${fg_black}$(BGx aaaaaa)%s${st_def}" "$i"
	# '

	printf " "

	reply_read_single_hidden_timed

	[[ -z $reply ]] || break

	tput sgr0	# turn off all attributes
	tput ed

	i=$(( $i - 1 ))
	#i=$((i--))

    done
}


reply_read_single_hidden_timed()
{
    # timer not visible
    # timer exits
    # input is not visible
    # first input character goes directly to $reply
    local t=1

    ## use -t flag before -n flag to prevent '-t not an identifier' error
    ## (-N takes timer into account, see below)
    ## e flag causing info to disappear if timer bigger then 1
    ## -N returns after nchars, eof, or timer
    read -r -s -t $t -N 1 reply
}
